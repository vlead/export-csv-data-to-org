#+TITLE: Exporter Program to convert data form csv to org format
#+AUTHOR: VLEAD
#+DATE: [2015-11-25 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil


* Introduction
  Exporter program exports data from xlsx format to org format. The
  program is written in python language.

* Requirements
  1. Each test case is a file in a specified format.
  2. All test cases in the excel file are converted to the specified
     format.
  3. A directory is created for each experiment and test cases files
     are placed inside it.
  4. Create an org file for each experiment containing links to all
     the test cases(org) files in the format: "<s.no> <link to org
     file>". Name of the file has to be:
     "experimentnamee_metafile.org"
  5. Write a script to make the test cases org file look properly in
     github.
  6. Create a test report for each lab in org table format.
  7. A lab may contain a "system" sheet. If this sheet is present then
     create a folder called "system" instead of "exp<count>"
     folder. Experiment counter should not be affected because of this
     sheet.
  8. Create another script to parse the test report and generate
     statistics of passed/failed test cases on per experiment basis
     and per lab basis.

* Design
The model consists of two programs. Programs are implemented in
Python. 

** Prerequisite
*** Install xlrd
You can install xlrd package by either of the two proposed methods below.
**** Method 1 - via pip
#+begin_example
apt-get -y install python-pip
pip install xlrd
#+end_example
**** Method 2 - via repository
1. Add repo to the sources list file =/etc/apt/sources.list=
#+BEGIN_EXAMPLE
deb http://us.archive.ubuntu.com/ubuntu vivid main universe
#+END_EXAMPLE
2. Update machine after adding repo in sources.
#+BEGIN_EXAMPLE
sudo apt-get update
#+END_EXAMPLE
3. Install xlrd package.
#+BEGIN_EXAMPLE
sudo apt-get install python-xlrd
#+END_EXAMPLE

** Run the script
Tangle out the python code as =exporter.py= from this model file and
then run the script as follows:
#+begin_example
python exporter.py <path-to-xlsx-files>
#+end_example
** Design of first program
Program takes xlsx file as input. It can also walk over the
directories and process all xlsx files inside it. A directory is
created for each xlsx file with same name as name of the lab
=labname=. A xlsx file contains multiple sheets, each sheet
corresponds to an experiment. For each experiment/sheet a
sub-directory is created inside the lab directory with same name as
name of the sheet =experiment=. A sheet consits of multiple rows,
where each row corresponds to a test case. Sample row in a sheet of
xlsx file is as follows:
#+begin_example
|---------------------+-----------------+-------------------+----------------+------------------+----------------------+-----------------------------------+----------------------+------------+-------------------+-------------------------------------------------+--------------------------------+-------------+------------+-----------+-----------------------|
| *Lab Name*          | *Experiment ID* | *Requirements*    | *Test Step ID* | *Test Case Type* | *Test Description*   | *Test Steps*                      | *Expected Result*    | *Status*   | *Test Case Owner* | *Pre/Post Conditions*                           | *Data/Environment*             | *Dev Owner* | *Reviewed* | *History* | *Additional Comments* |
|---------------------+-----------------+-------------------+----------------+------------------+----------------------+-----------------------------------+----------------------+------------+-------------------+-------------------------------------------------+--------------------------------+-------------+------------+-----------+-----------------------|
| Problem Solving Lab |                 | User friendliness |              1 | Usability        | Experiment should be | While testing observe             | Experiment should be | Inprogress | Nihanth           | 1. Open the url vlabs.ac.in and                 | OS: Windows7, Linux            |             |            |           |                       |
|                     |                 | of the Experiment |                |                  | easily usable        | for easiness to use the           | user friendly        |            |                   | vlabs home page will be displayed.              | Browsers: Firefox,             |             |            |           | Missed out test cases |
|                     |                 |                   |                |                  |                      | features of the experiment        |                      |            |                   | 2. Click on IIIT-Hyderabad and a list           | Chrome                         |             |            |           | on the landing page.  |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | of labs will be displayed on the screen         | Bandwidth: 100 Mbps            |             |            |           |                       |
|                     |                 |                   |                |                  |                      | Information to use the experiment |                      |            |                   | 3. Select Problem Solving Lab, a home page      | Hardware Configuration: 8GBRAM |             |            |           |                       |
|                     |                 |                   |                |                  |                      | Navigation Look and Feel Speed    |                      |            |                   | will be displayed and click on List of          | Processor: i5                  |             |            |           |                       |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | experiments link, where a list of experiments   |                                |             |            |           |                       |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | will be displayed on the screen                 |                                |             |            |           |                       |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | 4. Select "Numerical Representation experiment" |                                |             |            |           |                       |
|---------------------+-----------------+-------------------+----------------+------------------+----------------------+-----------------------------------+----------------------+------------+-------------------+-------------------------------------------------+--------------------------------+-------------+------------+-----------+-----------------------|
#+end_example

For each test case an org file is created inside the experiment
sub-directory with name
=experimentname_testcasenumber_feature.org=. This org file contains
certain column values of a row in a proper org format.

Before writing data to the org file. Row values are first reorganized
to present them properly in org format.

After the re-organization the org file looks as follows:

#+begin_example
*Author : Nihanth
*Date Created : 19.11.2015
*Environment
   - OS: Windows 7, Linux
   - Browsers: Firefox,Chrome
   - Bandwidth : 100Mbps
   - Hardware Configuration:8GBRAM , 
   - Processor:i5
*Objective
   - User friendliness of the Experiment
*Pre/Post Conditions
   - Open the url vlabs.ac.in and vlabs home page will be displayed.
   - Click on IIIT-Hyderabad and a list of labs will be displayed on
     the screen.
   - Select"Problem Solving"Lab, a home page will be displayed and
     click on list of experiments link, where a list of experiments
     will be displayed.
   - Select "Numerical Representation" experiment.
*Test steps
   - While testing observe for easiness to use the features of the
     experiment
   1. Information to use the experiment
   2. Navigation
   3. Look and Feel
   4. Speed
*Expected Result
   - Experiment should be user friendly
*Reviews/Comments
#+end_example

** Deisgn of the second program
This program processes the test reports and generate the statistics of
pass/fail experiment, per lab wise as well as per experiment wise.

Once the statistics is collected from all the test reports then it is
dumped in a json format inside a statistics.org file.

* Implementation
** Exporter Program
*** Code
#+begin_src python :tangle exporter.py :eval no 
#######################################################
# File name: exporter.py
# Author: Yogesh Agrawal
# Submission: Dec 10, 2015
# Email: yogeshiiith@gmail.com; yogesh@vlabs.ac.in
#######################################################


import xlrd
import os
import sys
import re
import time

filesexclude = set(["README.md"])
filescombined = "(" + ")|(".join(filesexclude) + ")"

dirsexclude = set([".git", "IIT Bombay", "Amrita"])
dirscombined = "(" + ")|(".join(dirsexclude) + ")"

snoColumnwidth = 5
expnameColumnwidth = 30
testcasenameColumnwidth = 50
passfailColumnwidth = 10
defectColumnwidth = 15


def main(argv):
    if len(argv) < 2:
        print "Please provide the path of the file/directory within quotes in command line!"
    else:
        path = argv[1]
        if os.path.isfile(path) and os.path.exists(path):
            single_file(path)
        elif os.path.isdir(path) and os.path.exists(path):
            walk_over_path(path)
        else:
            print "Provided target does not exists!"

def single_file(path):
    basename = os.path.basename(path)
    name, extension = os.path.splitext(basename)
    if (extension == '.xlsx'):
        process_lab_file(path, name)
    else:
        print "Program does not support the provided file format!"
    return

def walk_over_path(path):
    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if not re.match(dirscombined, d)]
        files[:] = [f for f in files if not re.match(filescombined, f)]
        for f in files:
            name, extension = os.path.splitext(f)
            if (extension == '.xlsx'):
                path = root + "/" + f
                process_lab_file(path, name)
    return

def process_lab_file(path, labName):
    book = xlrd.open_workbook(path)
    number_of_experiments = book.nsheets
    parentDirectory = os.path.dirname(path)
    directory = parentDirectory + "/" + labName
    gitLabUrl = "https://github.com/Virtual-Labs/" + labName
    make_directory(directory)
    parentDirectory = directory
    labTestCases = []
    expToTestCasesCount = []
    for expIndex in range(number_of_experiments):
        experiment = book.sheet_by_index(expIndex)
        directory = parentDirectory + "/" + experiment.name
        gitExpUrl = gitLabUrl +  "/blob/master/test-cases/integration_test-cases" + "/" + experiment.name
        make_directory(directory)
        testCases = process_experiment(experiment, directory, gitExpUrl)
        metaFilePath = directory + "/" + experiment.name + "_metafile.org"
        createMetaFile(testCases, metaFilePath)
        labTestCases.extend(testCases)
    createTestReport(parentDirectory, labTestCases, labName, gitLabUrl)
    return

def make_directory(directory):
    if not os.path.exists(directory):
            os.makedirs(directory)
    return

def process_experiment(experiment, directory, gitExpUrl):
    totalRows = experiment.nrows
    testCases = []
    testCaseFileName = experiment.name + "_01_" +  experiment.row(1)[2].value + ".org"
    linkto =  gitExpUrl + "/" + testCaseFileName
    linkname = testCaseFileName
    referlink = "[[" + linkto + "][" + linkname + "]]"
    postConditions = False
    if (re.match('post conditions', experiment.row(0)[12].value, re.IGNORECASE)):
        postConditions = True
    for row in range(1, totalRows):
        testCaseFileName = experiment.name + "_" + str(row).zfill(2) + "_" + experiment.row(row)[2].value + ".org"
        filepath = directory + "/" + testCaseFileName
        gitTestCaseUrl = gitExpUrl + "/" + testCaseFileName
        testCases.append(gitTestCaseUrl)
        data =  org_data(experiment.row(row), row, postConditions)
        if(row > 1):
            data['conditions'] = "* Pre/Post conditions\n  - Refer to first test case " + referlink + "\n\n"
        write_to_file(filepath, data)
    return testCases

def org_data(rowValue, rowNumber, postConditions):
    data = {}
    data['author'] = "* Author: " + rowValue[10].value + "\n"
    data['date'] = "* Date Created: " + time.strftime("%d %b %Y") + "\n"
    data['environment'] = "* Environment\n" + reorganize_data_version1(rowValue[12].value) + "\n"
    data['objective'] = "* Objective\n" + reorganize_data_version1(rowValue[6].value) + "\n"
    data['preConditions'] = "* Pre conditions\n" + reorganize_data_version2(rowValue[11].value) + "\n"
    if (postConditions):
        data['postConditions'] = "* Post conditions\n" + reorganize_data_version2(rowValue[12].value) + "\n"
        data['review_comments'] = "* Review/comments\n" + reorganize_data_version1(rowValue[15].value) + "\n"
    else:
        data['postConditions'] = "* Post conditions\n  - Nil" + "\n"
        data['review_comments'] = "* Review/comments\n" + reorganize_data_version1(rowValue[14].value) + "\n"
    if (rowNumber == 1):
        data['testSteps'] = "* Test Steps\n" + reorganize_teststeps(rowValue[7].value) + "\n"
    else:
        data['testSteps'] = "* Test Steps\n" + reorganize_data_version2(rowValue[7].value) + "\n"
    data['result'] = "* Expected result\n" + reorganize_data_version2(rowValue[8].value) + "\n"
    return data

def reorganize_data_version1(data):
    if (len(data) == 0):
        return ""
    splitData = data.split('\n')
    length = len(splitData)
    organizedData = ""
    for line in splitData:
        if(line == '\n' or line == ""):
            continue
        line = line.lstrip(" -")
        organizedData = organizedData + '  - ' + line + "\n"
    return organizedData

def reorganize_data_version2(data):
    if (len(data) == 0):
        return ""
    splitData = data.split('\n')
    length = len(splitData)
    organizedData = ""
    count = 1
    for line in splitData:
        if(line == '\n' or line == ""):
            continue
        line = line.lstrip(" -.1234567890")
        organizedData = organizedData +  '  ' + str(count) + '. ' + line + "\n"
        count+= 1
    return organizedData

def reorganize_teststeps(data):
    if (len(data) == 0):
        return ""
    splitData = data.split('\n')
    length = len(splitData)
    organizedData = ""
    splitData[0] = splitData[0].lstrip(" -")
    organizedData+= '  - ' + splitData[0] + '\n'
    count = 1
    for line in splitData[2:length-1]:
        line = line.lstrip(" -.1234567890")
        organizedData+= '  ' + str(count) + '. ' + line + "\n"
        count+=1
    return organizedData

def write_to_file(filepath, data):
    filepointer = open(filepath, 'w')
    filepointer.write(data['author'].encode("utf-8"))
    filepointer.write(data['date'].encode("utf-8"))
    filepointer.write(data['environment'].encode("utf-8"))
    filepointer.write(data['objective'].encode("utf-8"))
    filepointer.write(data['preConditions'].encode("utf-8"))
    filepointer.write(data['postConditions'].encode("utf-8"))
    filepointer.write(data['testSteps'].encode("utf-8"))
    filepointer.write(data['result'].encode("utf-8"))
    filepointer.write(data['review_comments'].encode("utf-8"))
    filepointer.write("\n")
    filepointer.close()
    return

def createMetaFile(testCases, metaFilePath):
    filePointer = open(metaFilePath, 'w')
    filePointer.write("S.no\t\tTest case link\n")
    count = 1
    for path in testCases:
        basename = os.path.basename(path)
        line = str(count) + ". " + "\t" + "[[" + path + "][" + basename + "]]" + "\n"
        filePointer.write(line)
        count+=1
    filePointer.close()
    return

def generateLine(sno, expname, testcasename, passfail, defectlink, linklength=0):
    snolength = len(sno); sno = sno + " "*(snoColumnwidth - snolength)
    expnamelength = len(expname); expname = expname + " "*(expnameColumnwidth - expnamelength)
    if (linklength==0):
        linklength = len(testcasename);
    testcasename = testcasename + " "*(testcasenameColumnwidth - linklength)
    passfaillength = len(passfail); passfail = passfail + " "*(passfailColumnwidth - passfaillength)
    defectlinklength = len(defectlink); defectlink = defectlink + " "*(defectColumnwidth - defectlinklength)

    line = "| " + sno + "  |  " + expname + "  |  " + testcasename + "  |  " + passfail + "  |  " + defectlink + " |\n"
    return line

def lineBreak():
    line  = "|" + "-"*132+ "|\n"
    return (line)


def createTestReport(parentDirectory, labTestCases, labName, gitLabUrl):
    commit_id = raw_input("Please enter commit id to generate test report for lab: %s\n" %(labName))
    testReportPath = parentDirectory + "/" + labName + "_" + commit_id + "_testreport.org"
    filePointer = open(testReportPath, 'w')
    filePointer.write("* Test Report\n")
    filePointer.write("** Lab Name : %s\n" %(labName))
    filePointer.write("** GitHub URL : %s\n" %(gitLabUrl))
    filePointer.write("** Commit ID : %s\n\n" %(commit_id))
    filePointer.write(lineBreak())

    sno = "*Sno"; expname = "Experiment Name"; testcasename = "Test Case";
    passfail = "Pass/Fail"; defectlink = "Defect Link*";
    line = generateLine(sno, expname, testcasename, passfail, defectlink)
    filePointer.write(line)

    filePointer.write(lineBreak())
    count = 1;
    for path in labTestCases:
        basename = os.path.basename(path)

        sno = str(count)+ ". ";
        expname = basename.split("_")[0];
        testcasename = "[[" + path + "][" + basename + "]]";
        passfail = " "; defectlink = " ";

        linklength = len(basename);

        line = generateLine(sno, expname, testcasename, passfail, defectlink, linklength)
        filePointer.write(line)
        filePointer.write(lineBreak())
        count+=1;
    filePointer.close()
    return

if __name__ == "__main__":
    main(sys.argv)
#+end_src

** Test report generation Program
*** Code
#+begin_src python :tangle testreport.py :eval no
#######################################################
# File name: testreport.py
# Author: Yogesh Agrawal
# Submission: Dec 10, 2015
# Email: yogeshiiith@gmail.com; yogesh@vlabs.ac.in
#######################################################



import os
import sys
import re
import time

filesexclude = set([".*testreport.org~", ".*statsreport.org", "README.md", ".*metafile.org", ".*stats.org", ".*testreport.org", ".*.xlsx", ".*.html"])
filescombinedexclude = "(" + ")|(".join(filesexclude) + ")"

filesinclude = set([".*org"])
filescombinedinclude = "(" + ")|(".join(filesinclude) + ")"

dirsexclude = set([".git", "IIT Bombay", "Amrita", "NIT Karnataka"])
dirscombined = "(" + ")|(".join(dirsexclude) + ")"

snoColumnwidth = 5
expnameColumnwidth = 30
testcasenameColumnwidth = 50
passfailColumnwidth = 10
defectColumnwidth = 15
severityColumnwidth = 12
allTestCasesLink = []

def main(argv):
    if len(argv) < 2:
        print "Please provide the path of the lab directory within quotes in command line!"
    else:
        path = argv[1]
        targetDir = argv[2]
        if os.path.isdir(path) and os.path.exists(path):
            walk_over_path(path, targetDir)
        else:
            print "Provided target does not exists!"

def walk_over_path(path, targetDir):
    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if not re.match(dirscombined, d)]
        files[:] = [f for f in files if not re.match(filescombinedexclude, f)]
        files[:] = [f for f in files if re.match(filescombinedinclude, f)]
        if files:
            files = sorted(files)
            labName = root.split("/")[-2]
            gitLabUrl = "https://github.com/Virtual-Labs/" + labName
            testCasesLink = createMetaFile(root, files, gitLabUrl)
            allTestCasesLink.extend(testCasesLink)
    createTestReport(path, labName, gitLabUrl, allTestCasesLink, targetDir)
    return

def createMetaFile(root, testCases, gitLabUrl):
    expname = testCases[0].split("_")[0]
    metaFilePath = root + "/" + expname + "_metafile.org"
    filePointer = open(metaFilePath, 'w')
    filePointer.write("S.no\t\tTest case link\n")
    count = 1
    labName = root.split("/")[-2]
    expname = root.split("/")[-1]
    gitExpUrlPartial = gitLabUrl +  "/blob/master/test-cases/integration_test-cases/" + expname
    testCasesLink = []
    for path in testCases:
        gitExpUrl = gitExpUrlPartial + "/" + path
        testCasesLink.append(gitExpUrl)
        line = str(count) + ". " + "\t" + "[[" + gitExpUrl + "][" + path + "]]" + "\n"
        filePointer.write(line)
        count+=1
    filePointer.close()
    return testCasesLink

def generateLine(sno, expname, testcasename, passfail, severity, defectlink, linklength=0):
    snolength = len(sno); sno = sno + " "*(snoColumnwidth - snolength)
    expnamelength = len(expname); expname = expname + " "*(expnameColumnwidth - expnamelength)
    if (linklength==0):
        linklength = len(testcasename);
    testcasename = testcasename + " "*(testcasenameColumnwidth - linklength)
    passfaillength = len(passfail); passfail = passfail + " "*(passfailColumnwidth - passfaillength)
    defectlinklength = len(defectlink); defectlink = defectlink + " "*(defectColumnwidth - defectlinklength)
    severitylength = len(severity); severity = severity + " "*(severityColumnwidth - severitylength)
    line = "| " + sno + "  |  " + expname + "  |  " + testcasename + "  |  " + passfail + "  |  " + severity + " | " + defectlink + " |\n"
    return line

def lineBreak():
    line  = "|" + "-"*147+ "|\n"
    return (line)

def make_directory(directory):
    if not os.path.exists(directory):
            os.makedirs(directory)
    return

def getDateTime():
    timetuple = time.localtime()
    date = "%s-%s-%s" %(timetuple[2], timetuple[1], timetuple[0])
    currenttime = "%s:%s:%s" %(timetuple[3], timetuple[4], timetuple[5])
    return date, currenttime

def createTestReport(root, labName, gitLabUrl, allTestCasesLink, targetDir):
    commit_id = raw_input("Please enter commit id for lab: %s\n" %(labName))
    date, time = getDateTime()

    projectName = os.path.basename(root)
    projectDirectory = targetDir + "/"  + projectName
    make_directory(projectDirectory)
    testreportDirectory = projectDirectory + "/" + "%s_%s" %(date, commit_id)
    make_directory(testreportDirectory)

    testReportPath = testreportDirectory + "/" + time + "_testreport.org"
    filePointer = open(testReportPath, 'w')
    filePointer.write("* Test Report\n")
    filePointer.write("** Lab Name : %s\n" %(labName))
    filePointer.write("** GitHub URL : %s\n" %(gitLabUrl))
    filePointer.write("** Commit ID : %s\n\n" %(commit_id))
    filePointer.write(lineBreak())

    sno = "*Sno"; expname = "Experiment Name"; testcasename = "Test Case";
    passfail = "Pass/Fail"; severity = "Severity"; defectlink = "Defect Link*";

    line = generateLine(sno, expname, testcasename, passfail, severity, defectlink)

    filePointer.write(line)
    filePointer.write(lineBreak())
    count = 1;
    for path in allTestCasesLink:
        basename = os.path.basename(path)

        sno = str(count)+ ". ";
        expname = basename.split("_")[0];
        testcasename = "[[" + path + "][" + basename + "]]";
        passfail = ""; defectlink = ""; severity = "";

        linklength = len(basename);

        line = generateLine(sno, expname, testcasename, passfail, severity, defectlink, linklength)
        filePointer.write(line)
        filePointer.write(lineBreak())
        count+=1;
    filePointer.close()
    return

if __name__ == "__main__":
    main(sys.argv)
#+end_src

** Statistics report genration Program
*** Code
#+begin_src python :tangle statistics.py :eval no 
#######################################################
# File name: statistics.py
# Author: Yogesh Agrawal
# Submission: Dec 10, 2015
# Email: yogeshiiith@gmail.com; yogesh@vlabs.ac.in
#######################################################

import os
import sys
import re
import time

filesinclude = set([".*testreport.org"])
filescombined = "(" + ")|(".join(filesinclude) + ")"

filesexclude = set([".*testreport.org~", ".*statsreport.org", ".*.html"])
filescombinedexcl = "(" + ")|(".join(filesexclude) + ")"

dirsexclude = set([".git", "IIT Bombay", "Amrita"])
dirscombined = "(" + ")|(".join(dirsexclude) + ")"

snoColumnwidth = 5
expnameColumnwidth = 30
passColumnwidth = 10
failColumnwidth = 11


def main(argv):
    if len(argv) < 2:
        print "Please provide the path of the file/directory within quotes in command line!"
    else:
        path = argv[1]
        if os.path.isfile(path):
            single_file(path)
        else:
            walk_over_path(path)

def single_file(path):
    basename = os.path.basename(path)
    basedir = os.path.dirname(path)
    name, extension = os.path.splitext(basename)
    if (re.match(".*_testreport.org", basename)):
        totalStatistics = {}
        statistics = getStatistics(path)
    else:
        print "Program does not support the provided file format!"
    return

def walk_over_path(path):
    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if not re.match(dirscombined, d)]
        files[:] = [f for f in files if re.match(filescombined, f) and not re.match(filescombinedexcl, f)]
        for f in files:
            if (re.match(".*_testreport.org", f)):
                filePath = root + "/" + f
                statistics = getStatistics(filePath)
    return

def getStatistics(path):
    statistics = {}

    filePointer = open(path, 'r')
    filePointer.readline()
    labNameLine = filePointer.readline()
    gitLabUrlLine = filePointer.readline()
    commitIdLine = filePointer.readline()
    filePointer.readline(); filePointer.readline(); filePointer.readline(); filePointer.readline()
    for line in filePointer.readlines():
        line = line.strip("|\n")
        if re.match('--', line):
            continue
        splitData = line.split('|')
        splitData = [item.strip() for item in splitData]
        if (splitData[1] not in statistics):
            statistics[splitData[1]] = {}
            statistics[splitData[1]]['fail'] = 0
            statistics[splitData[1]]['pass'] = 0
            statistics[splitData[1]]['s1'] = 0
            statistics[splitData[1]]['s2'] = 0
            statistics[splitData[1]]['s3'] = 0
        if(re.match('pass', splitData[3], re.IGNORECASE)):
            statistics[splitData[1]]['pass'] += 1
        elif(re.match('fail', splitData[3], re.IGNORECASE)):
            statistics[splitData[1]]['fail'] += 1

        if(re.match('s1', splitData[4], re.IGNORECASE)):
            statistics[splitData[1]]['s1'] += 1
        elif(re.match('s2', splitData[4], re.IGNORECASE)):
            statistics[splitData[1]]['s2'] += 1
        elif(re.match('s3', splitData[4], re.IGNORECASE)):
            statistics[splitData[1]]['s3'] += 1

    filePointer.close()
    dirname = os.path.dirname(path)
    filename = os.path.basename(path)
    time = filename.split("_")[0]
    commitId = commitIdLine.split(" ")[-1].strip("\n")
    labName = labNameLine.split(" ")[-1].strip("\n")
    exppath = dirname + "/" + time + "_stats.org"
    write_to_file_per_lab(exppath, labNameLine, gitLabUrlLine, commitIdLine, statistics)
    return statistics

def generateLine(sno, expname, passcount, failcount):
    snolength = len(sno); sno = sno + " "*(snoColumnwidth - snolength)
    expnamelength = len(expname); expname = expname + " "*(expnameColumnwidth - expnamelength)
    passcountlength = len(passcount); passcount = passcount + " "*(passColumnwidth - passcountlength)
    failcountlength = len(failcount); failcount = failcount + " "*(failColumnwidth - failcountlength)

    line = "| " + sno + "  |  " + expname + "  |  " + passcount + "  |  " + failcount + " |\n"
    return line

def lineBreak():
    line  = "|" + "-"*73+ "|\n"
    return (line)


def write_to_file_per_lab(path, labNameLine, gitLabUrlLine, commitIdLine, data):
    filePointer = open(path, 'w')
    filePointer.write("* Statistics Report\n")
    filePointer.write(labNameLine)
    filePointer.write(gitLabUrlLine)
    filePointer.write(commitIdLine)
    filePointer.write("\n")

    table = lineBreak()
    table+= generateLine("*S.no", "Experiment Name", "Pass Count", "Fail Count*")
    table+= lineBreak()
    count = 1
    passcount = 0;    failcount = 0; s1count = 0; s2count = 0; s3count = 0;
    for exp in data:
        sno = str(count);  passcountstr = str(data[exp]['pass']); failcountstr = str(data[exp]['fail'])
        line = generateLine(sno, exp, passcountstr, failcountstr)
        table += line + lineBreak()
        passcount+=data[exp]['pass']
        failcount+=data[exp]['fail']
        s1count+=data[exp]['s1']
        s2count+=data[exp]['s2']
        s3count+=data[exp]['s3']
        count+=1

    filePointer.write("Total number of passed test cases = %s\n\n" %(passcount))
    filePointer.write("Total number of test cases with S1 severity = %s\n\n" %(s1count))
    filePointer.write("Total number of test cases with S2 severity = %s\n\n" %(s2count))
    filePointer.write("Total number of test cases with S3 severity = %s\n\n" %(s3count))
    filePointer.write("Total number of failed test cases = %s\n\n" %(failcount))

    filePointer.write(table)

    filePointer.close()
    return


if __name__ == "__main__":
    main(sys.argv)
#+end_src
* Releases
** Release - v1.0
   This release will satisfy all the requirements.
   Release Date :: [2015-11-30 Mon]
