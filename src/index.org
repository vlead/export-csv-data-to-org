#+TITLE: Exporter Program to convert data form csv to org format
#+AUTHOR: VLEAD
#+DATE: [2015-11-25 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil


* Introduction
  Exporter program exports data from xlsx format to org format. The
  program is written in python language.

* Requirements
  1. Each test case is a file in a specified format.
  2. All test cases in the excel file are converted to the specified
     format.
  3. A directory is created for each experiment and test cases files
     are placed inside it.
  4. Create an org file for each experiment containing links to all
     the test cases(org) files in the format: "<s.no> <link to org
     file>". Name of the file has to be:
     "experimentnamee_metafile.org"
  5. Write a script to make the test cases org file look properly in
     github.
  6. Optional requirement: Create a test report for each lab in org
     table format.

* Design
The model consists of two programs. Programs are implemented in
Python. 
** Design of first program
Program takes xlsx file as input. It can also walk over the
directories and process all xlsx files inside it. A directory is
created for each xlsx file with same name as name of the lab
=labname=. A xlsx file contains multiple sheets, each sheet
corresponds to an experiment. For each experiment/sheet a
sub-directory is created inside the lab directory with same name as
name of the sheet =experiment=. A sheet consits of multiple rows,
where each row corresponds to a test case. Sample row in a sheet of
xlsx file is as follows:
#+begin_example
|---------------------+-----------------+-------------------+----------------+------------------+----------------------+-----------------------------------+----------------------+------------+-------------------+-------------------------------------------------+--------------------------------+-------------+------------+-----------+-----------------------|
| *Lab Name*          | *Experiment ID* | *Requirements*    | *Test Step ID* | *Test Case Type* | *Test Description*   | *Test Steps*                      | *Expected Result*    | *Status*   | *Test Case Owner* | *Pre/Post Conditions*                           | *Data/Environment*             | *Dev Owner* | *Reviewed* | *History* | *Additional Comments* |
|---------------------+-----------------+-------------------+----------------+------------------+----------------------+-----------------------------------+----------------------+------------+-------------------+-------------------------------------------------+--------------------------------+-------------+------------+-----------+-----------------------|
| Problem Solving Lab |                 | User friendliness |              1 | Usability        | Experiment should be | While testing observe             | Experiment should be | Inprogress | Nihanth           | 1. Open the url vlabs.ac.in and                 | OS: Windows7, Linux            |             |            |           |                       |
|                     |                 | of the Experiment |                |                  | easily usable        | for easiness to use the           | user friendly        |            |                   | vlabs home page will be displayed.              | Browsers: Firefox,             |             |            |           | Missed out test cases |
|                     |                 |                   |                |                  |                      | features of the experiment        |                      |            |                   | 2. Click on IIIT-Hyderabad and a list           | Chrome                         |             |            |           | on the landing page.  |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | of labs will be displayed on the screen         | Bandwidth: 100 Mbps            |             |            |           |                       |
|                     |                 |                   |                |                  |                      | Information to use the experiment |                      |            |                   | 3. Select Problem Solving Lab, a home page      | Hardware Configuration: 8GBRAM |             |            |           |                       |
|                     |                 |                   |                |                  |                      | Navigation Look and Feel Speed    |                      |            |                   | will be displayed and click on List of          | Processor: i5                  |             |            |           |                       |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | experiments link, where a list of experiments   |                                |             |            |           |                       |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | will be displayed on the screen                 |                                |             |            |           |                       |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | 4. Select "Numerical Representation experiment" |                                |             |            |           |                       |
|---------------------+-----------------+-------------------+----------------+------------------+----------------------+-----------------------------------+----------------------+------------+-------------------+-------------------------------------------------+--------------------------------+-------------+------------+-----------+-----------------------|
#+end_example

For each test case an org file is created inside the experiment
sub-directory with name
=experimentname_testcasenumber_feature.org=. This org file contains
certain column values of a row in a proper org format. Sample org
format is as follows:
#+begin_example
Author :
Date Created :
Environment : 
Objective :
Pre/Post conditions :
Test Steps :
Expected result :
Reviews/Comments :
#+end_example

*** Running the script
**** Prerequisite
Install xlrd package
#+begin_example
pip install xlrd
#+end_example
**** Run the script
Tangle out the python code as =exporter.py= from this model file and
then run the script as follows:
#+begin_example
python exporter.py <path-to-xlsx-files>
#+end_example
** Design of the second program
This program processes all the org files generated by the previous
program. The aim of this program is to re-organize the data with
proper formatting such that it looks nicely in github page. Example
input file to this program is as follows:

#+begin_example
*Author: Nihanth
*Date Created: Wed Dec  2 14:51:22 2015
*Environment 
OS: Windows 7, Linux
Browsers: Firefox,Chrome
Bandwidth : 100Mbps
Hardware Configuration:8GBRAM , 
Processor:i5,
*Objective 
Experiment should be easily usable
*Pre/Post conditions 
1.Open the url vlabs.ac.in and vlabs home page will be displayed 
2. Click on IIIT-Hyderabad and a list of labs will be displayed on the screen 
3.Select Problem Solving Lab, a home page will be displayed and click on List of experiments link,  where a list of experiments will be displayed on the screen
4.Select  "Numerical Representation" experiment.
*Test Steps 
While testing observe for easiness to use the features of the experiment

Information to use the experiment
Navigation
Look and Feel
Speed
*Expected result 
Experiment should be user friendly
*Review comments 
#+end_example

And this program re-organizes the data and write it back to the same
file. Data is divided into sections starting with '*'. For each
section multiple white spaces and '-' are added before the begnning of
the each line. Adding these characters to the beginning make the data
look more elegant and presentable. Each section might be handled
differently depending on the formatting required for its data.

After the re-organization the org file looks as follows:
#+begin_example
*Author : Nihanth
*Date Created : 19.11.2015
*Environment
   - OS: Windows 7, Linux
   - Browsers: Firefox,Chrome
   - Bandwidth : 100Mbps
   - Hardware Configuration:8GBRAM , 
   - Processor:i5
*Objective
   - User friendliness of the Experiment
*Pre/Post Conditions
   - Open the url vlabs.ac.in and vlabs home page will be displayed.
   - Click on IIIT-Hyderabad and a list of labs will be displayed on
     the screen.
   - Select"Problem Solving"Lab, a home page will be displayed and
     click on list of experiments link, where a list of experiments
     will be displayed.
   - Select "Numerical Representation" experiment.
*Test steps
   - While testing observe for easiness to use the features of the
     experiment
   1. Information to use the experiment
   2. Navigation
   3. Look and Feel
   4. Speed
*Expected Result
   - Experiment should be user friendly
*Reviews/Comments
#+end_example

* Implementation
** First Program implementation
*** Main Function
#+begin_src python :tangle exporter.py :eval no 
import xlrd
import os
import sys
import re
import time

filesexclude = set(["README.md"])
filescombined = "(" + ")|(".join(filesexclude) + ")"

dirsexclude = set([".git", "exp.*", "IIT Bombay", "Amrita"])
dirscombined = "(" + ")|(".join(dirsexclude) + ")"

def main(argv):
    if len(argv) < 2:
        print "Please provide the path of the file/directory within quotes in command line!"
    else:
        path = argv[1]
        if os.path.isfile(path):
            single_file(path)
        else:
            walk_over_path(path)
#+end_src

*** Process single xlsx file
#+begin_src python :tangle exporter.py :eval no
def single_file(path):
    basename = os.path.basename(path)
    name, extension = os.path.splitext(basename)
    if (extension == '.xlsx'):
        process_lab_file(path, name)
    else:
        print "Program does not support the provided file format!"
    return
#+end_src

*** Process multiple xlsx files
#+begin_src python :tangle exporter.py :eval no
def walk_over_path(path):
    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if not re.match(dirscombined, d)]
        files[:] = [f for f in files if not re.match(filescombined, f)]
        print "root = ", root; print "dirs = ", dirs; print "files = ", files
        for f in files:
            name, extension = os.path.splitext(f)
            if (extension == '.xlsx'):
                path = root + "/" + f
                print "Path = ", path
                process_lab_file(path, name)
    return
#+end_src

*** Open lab file
#+begin_src python :tangle exporter.py :eval no
def process_lab_file(path, labName):
    book = xlrd.open_workbook(path)
    number_of_experiments = book.nsheets
    parentDirectory = os.path.dirname(path)
    directory = parentDirectory + "/" + labName
    make_directory(directory)
    parentDirectory = directory

    for expIndex in range(number_of_experiments):
        directory = parentDirectory + "/exp" + str(expIndex+1).zfill(2)
        make_directory(directory)
        experiment = book.sheet_by_index(expIndex)
        process_experiment(experiment, directory)
    return
#+end_src
*** Make Directory
#+begin_src python :tangle exporter.py :eval no
def make_directory(directory):
    if not os.path.exists(directory):
            os.makedirs(directory)
    return
#+end_src
*** Process Experiment
#+begin_src python :tangle exporter.py :eval no
def process_experiment(experiment, directory):
    totalRows = experiment.nrows
    testCasesPath = []
    for row in range(1, totalRows):
        filepath = directory + "/" + experiment.name + "_" + str(row).zfill(2) + "_" +  experiment.row(row)[2].value + ".org"
        testCasesPath.append(filepath)
        filepointer = open(filepath, 'w')
        data =  org_data(experiment.row(row))
        write_to_file(filepointer, data)

    metaFilePath = directory + "/" + experiment.name + "_metafile" + ".org"
    metaFilePointer = open(metaFilePath, 'w')
    save_link_of_test_cases(metaFilePointer, testCasesPath)
    return
#+end_src
*** Represent in Org format
#+begin_src python :tangle exporter.py :eval no
def org_data(row):
    data = {}
    data['author'] = "* Author: " + row[10].value + "\n"
    data['date'] = "* Date Created: " + time.strftime("%d %b %Y") + "\n"
    data['environment'] = "* Environment \n" + row[12].value + "\n"
    data['objective'] = "* Objective \n" + row[6].value + "\n"
    data['conditions'] = "* Pre/Post conditions \n" + row[11].value + "\n"
    data['testSteps'] = "* Test Steps \n" + row[7].value + "\n"
    data['result'] = "* Expected result \n" + row[8].value + "\n"
    data['review_comments'] = "* Review comments \n" + row[14].value + "\n"
    return data
#+end_src
*** Write org data to a file
#+begin_src python :tangle exporter.py :eval no
def write_to_file(filepointer, data):
    filepointer.write(data['author'].encode("utf-8"))
    filepointer.write(data['date'].encode("utf-8"))
    filepointer.write(data['environment'].encode("utf-8"))
    filepointer.write(data['objective'].encode("utf-8"))
    filepointer.write(data['conditions'].encode("utf-8"))
    filepointer.write(data['testSteps'].encode("utf-8"))
    filepointer.write(data['result'].encode("utf-8"))
    filepointer.write(data['review_comments'].encode("utf-8"))
    filepointer.write("\n")
    filepointer.close()
    return
#+end_src

*** Save links to test cases in a org file
#+begin_src python :tangle exporter.py :eval no
def save_link_of_test_cases(filepointer, testCasesPath):
    count = 1
    for path in testCasesPath:
        basename = os.path.basename(path)
        line = str(count) + ". " + "\t" + "[[" + path + "]" + "[" + basename + "]]" + "\n"
        filepointer.write(line)
        count+=1
    filepointer.close()
    return
#+end_src

*** Main function condition
#+begin_src python :tangle exporter.py :eval no
if __name__ == "__main__":
    main(sys.argv)
#+end_src

** Second Program implementation
*** Main Function
#+begin_src python :tangle sanitize.py :eval no 
import xlrd
import os
import sys
import re
import time

filesexclude = set(["README.md", ".*metafile.org"])
filescombined = "(" + ")|(".join(filesexclude) + ")"

dirsexclude = set([".git", "IIT Bombay", "Amrita"])
dirscombined = "(" + ")|(".join(dirsexclude) + ")"

def main(argv):
    if len(argv) < 2:
        print "Please provide the path of the file/directory within quotes in command line!"
    else:
        path = argv[1]
        if os.path.isfile(path):
            single_file(path)
        else:
            walk_over_path(path)
#+end_src
*** Process single org file
#+begin_src python :tangle sanitize.py :eval no 
def single_file(path):
    basename = os.path.basename(path)
    name, extension = os.path.splitext(basename)
    if (extension == '.org'):
        process_org_file(path)
    else:
        print "Program does not support the provided file format!"
    return
#+end_src

*** Process multiple org files
#+begin_src python :tangle sanitize.py :eval no 
def walk_over_path(path):
    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if not re.match(dirscombined, d)]
        files[:] = [f for f in files if not re.match(filescombined, f)]
        print "root = ", root; print "dirs = ", dirs; print "files = ", files
        for f in files:
            name, extension = os.path.splitext(f)
            if (extension == '.org'):
                path = root + "/" + f
                print "Path = ", path
                process_org_file(path)
    return
#+end_src

*** Open org file
#+begin_src python :tangle sanitize.py :eval no 
def process_org_file(path):
    filePointer = open(path, 'r')
    data = read(filePointer)
    filePointer.close()

    filename = os.path.basename(path)
    name, extension = os.path.splitext(filename)

    data = process_data(data, name)

    filePointer = open(path, 'w')
    write_to_file(filePointer, data)
    filePointer.close()
    return
#+end_src

*** Read File
#+begin_src python :tangle sanitize.py :eval no 
def read(filePointer):
    data = {}
    sectionList = ['empty', 'author', 'date', 'environment', 'objective', 'conditions', 'testSteps', 'result', 'review_comments']
    index = 0
    for section in filePointer.read().strip().split('* '):
        data[sectionList[index]] = section
        index+=1
    return data
#+end_src

*** Process data
#+begin_src python :tangle sanitize.py :eval no 
def process_data(data, name):
    data['author'] = '* ' + data['author']
    data['date'] = '* ' + data['date']
    data['environment'] = reorganize_data(data['environment'])
    data['objective'] = reorganize_data(data['objective'])
    data['conditions'] = reorganize_data(data['conditions'])
    split = name.split('_')
    if (split[1] == '01'):
        data['testSteps'] = reorganize_teststeps(data['testSteps'])
    else:
        data['testSteps'] = reorganize_data(data['testSteps'])
    data['result'] = reorganize_data(data['result'])
    data['review_comments'] = '* ' + data['review_comments']
    return data
#+end_src

*** Reorganize data
#+begin_src python :tangle sanitize.py :eval no 
def reorganize_data(data):
    splitData = data.split('\n')
    length = len(splitData)
    organizedData = '* '+ splitData[0]
    for line in splitData[1:length-1]:
        line = line.strip(" -")
        organizedData = organizedData + '\n    - ' + line
    organizedData = organizedData + '\n'
    return organizedData

def reorganize_teststeps(data):
    splitData = data.split('\n')
    length = len(splitData)
    organizedData = '* '+ splitData[0]
    splitData[1] = splitData[1].strip(" -")
    organizedData = organizedData + '\n    - ' + splitData[1] + '\n'
    count = 1
    for line in splitData[3:length-1]:
        line = line.strip(" -.1234567890")
        organizedData = organizedData + '\n    ' + str(count) + '. ' + line
        count+=1
    organizedData = organizedData + '\n'
    return organizedData

#+end_src

*** Write to file
#+begin_src python :tangle sanitize.py :eval no 
def write_to_file1(filepointer, data):
    filepointer.write(data['author'].encode("utf-8"))
    filepointer.write(data['date'].encode("utf-8"))
    filepointer.write(data['environment'].encode("utf-8"))
    filepointer.write(data['objective'])
    filepointer.write(data['conditions'].encode("utf-8"))
    filepointer.write(data['testSteps'].encode("utf-8"))
    filepointer.write(data['result'].encode("utf-8"))
    filepointer.write(data['review_comments'].encode("utf-8"))
    filepointer.write("\n")
    return

def write_to_file(filepointer, data):
    filepointer.write(data['author'])
    filepointer.write(data['date'])
    filepointer.write(data['environment'])
    filepointer.write(data['objective'])
    filepointer.write(data['conditions'])
    filepointer.write(data['testSteps'])
    filepointer.write(data['result'])
    filepointer.write(data['review_comments'])
    filepointer.write("\n")
    return
#+end_src

*** Main function condition
#+begin_src python :tangle sanitize.py :eval no 
if __name__ == "__main__":
    main(sys.argv)
#+end_src

* Releases
** Release - v1.0
   This release will satisfy all the requirements.
   Release Date :: [2015-11-30 Mon]

* Tasks
Implement following requirements:

1. "-" is not required in test steps and expected result columns.
   Refer to attached two org files and reorganize the data according
   to these files.
2. Use only two spaces in the beginning the new line. And use spaces
   instead of tab.
3. Create a test report file per lab basis as follows:
   #+begin_example
    S.no    Experiment Name    Test Case    Passed/Failed    Issue
   #+end_example
4. In pre/post condition for all test cases except first one, add a
   link to refer to first test case org file as: "Refer to the <link>"
5. Update model with instructions of installing xlrd package, pip.
6. A lab may contain a "system" sheet. If this sheet is present then
   create a folder called "system" instead of "exp<count>"
   folder. Experiment counter should not be affected because of this
   sheet.
7. Create another script to parse the test report and generate
   statistics of passed/failed test cases on per experiment basis and
   per lab basis.
8. See if exporter.py and sanitizer.py can be combined.

I will complete 1-6 requirements by today. 7th requirement I am not
sure if can be completed by today.

After all these requirements are implemented, then a review of the
code has to be done.
