#+TITLE: Exporter Program to convert data form csv to org format
#+AUTHOR: VLEAD
#+DATE: [2015-11-25 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil


* Introduction
  This document describes the design and implmentation of a program
  written to export data from xlsx format to org format. The program
  is written in python language.

* Requirements
  1. For each test case in a xlsx file create a org file.
  2. Create a directory for each experiment and test cases files are
     placed inside this directory.
  3. Create a meta file in org format for each experiment containing
     links to all the test cases(org) files in the format: "<s.no>
     <link to org file>". Name of the file has to be:
     "<experimentname>_metafile.org"
  4. Create a test report for each lab in org table format.
  5. A lab may contain a "system" sheet. If this sheet is present then
     create a folder called "system" instead of "exp<count>"
     folder. Experiment counter should not be affected because of this
     sheet.
  6. Create another script to parse the test report and generate
     statistics of passed/failed test cases on per experiment basis
     and per lab basis.

* Design
The model consists of three programs. Programs are implemented in
Python.

** Prerequisite
*** Install xlrd
You need to install "xlrd" package to process xlsx file. You can chose
any of the below mentioned method.
**** Method 1 - via pip
#+begin_example
apt-get -y install python-pip
pip install xlrd
#+end_example
**** Method 2 - via repository
1. Add repo to the sources list file =/etc/apt/sources.list=
#+BEGIN_EXAMPLE
deb http://us.archive.ubuntu.com/ubuntu vivid main universe
#+END_EXAMPLE
2. Update machine after adding repo in sources.
#+BEGIN_EXAMPLE
sudo apt-get update
#+END_EXAMPLE
3. Install xlrd package.
#+BEGIN_EXAMPLE
sudo apt-get install python-xlrd
#+END_EXAMPLE

** Run the script
How to run the script is documented in README files for each script.

** Design of first program
Program =exporter.py= takes xlsx file as input. A directory is created
for each xlsx file with same name as name of the lab =labname=. A xlsx
file contains multiple sheets, each sheet corresponds to an
experiment. For each experiment a sub-directory is created inside the
lab directory with same name as name of the sheet =experiment=. A
sheet consits of multiple rows, where each row corresponds to a test
case. Sample row in a sheet of xlsx file is as follows:
#+begin_example
|---------------------+-----------------+-------------------+----------------+------------------+----------------------+-----------------------------------+----------------------+------------+-------------------+-------------------------------------------------+--------------------------------+-------------+------------+-----------+-----------------------|
| *Lab Name*          | *Experiment ID* | *Requirements*    | *Test Step ID* | *Test Case Type* | *Test Description*   | *Test Steps*                      | *Expected Result*    | *Status*   | *Test Case Owner* | *Pre/Post Conditions*                           | *Data/Environment*             | *Dev Owner* | *Reviewed* | *History* | *Additional Comments* |
|---------------------+-----------------+-------------------+----------------+------------------+----------------------+-----------------------------------+----------------------+------------+-------------------+-------------------------------------------------+--------------------------------+-------------+------------+-----------+-----------------------|
| Problem Solving Lab |                 | User friendliness |              1 | Usability        | Experiment should be | While testing observe             | Experiment should be | Inprogress | Nihanth           | 1. Open the url vlabs.ac.in and                 | OS: Windows7, Linux            |             |            |           |                       |
|                     |                 | of the Experiment |                |                  | easily usable        | for easiness to use the           | user friendly        |            |                   | vlabs home page will be displayed.              | Browsers: Firefox,             |             |            |           | Missed out test cases |
|                     |                 |                   |                |                  |                      | features of the experiment        |                      |            |                   | 2. Click on IIIT-Hyderabad and a list           | Chrome                         |             |            |           | on the landing page.  |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | of labs will be displayed on the screen         | Bandwidth: 100 Mbps            |             |            |           |                       |
|                     |                 |                   |                |                  |                      | Information to use the experiment |                      |            |                   | 3. Select Problem Solving Lab, a home page      | Hardware Configuration: 8GBRAM |             |            |           |                       |
|                     |                 |                   |                |                  |                      | Navigation Look and Feel Speed    |                      |            |                   | will be displayed and click on List of          | Processor: i5                  |             |            |           |                       |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | experiments link, where a list of experiments   |                                |             |            |           |                       |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | will be displayed on the screen                 |                                |             |            |           |                       |
|                     |                 |                   |                |                  |                      |                                   |                      |            |                   | 4. Select "Numerical Representation experiment" |                                |             |            |           |                       |
|---------------------+-----------------+-------------------+----------------+------------------+----------------------+-----------------------------------+----------------------+------------+-------------------+-------------------------------------------------+--------------------------------+-------------+------------+-----------+-----------------------|
#+end_example

For each test case an org file is created inside the experiment
sub-directory with name
=experimentname_testcasenumber_feature.org=. This org file contains
certain column values of a row in a proper org format.

Before writing data to the org file. Row values are first reorganized
to present them properly in org format.

After the re-organization the org file looks as follows:

#+begin_example
*Author : Nihanth
*Date Created : 19.11.2015
*Environment
   - OS: Windows 7, Linux
   - Browsers: Firefox,Chrome
   - Bandwidth : 100Mbps
   - Hardware Configuration:8GBRAM , 
   - Processor:i5
*Objective
   - User friendliness of the Experiment
*Pre/Post Conditions
   - Open the url vlabs.ac.in and vlabs home page will be displayed.
   - Click on IIIT-Hyderabad and a list of labs will be displayed on
     the screen.
   - Select"Problem Solving"Lab, a home page will be displayed and
     click on list of experiments link, where a list of experiments
     will be displayed.
   - Select "Numerical Representation" experiment.
*Test steps
   - While testing observe for easiness to use the features of the
     experiment
   1. Information to use the experiment
   2. Navigation
   3. Look and Feel
   4. Speed
*Expected Result
   - Experiment should be user friendly
*Reviews/Comments
#+end_example

** Design of the second program
Program =testreport.py= generates test resport template from the test
cases org files per lab. This template is later used by the user to
fill the details about pass/fail of the test cases.
** Deisgn of the third program
Program =statistics.py= processes the test reports and generate the
statistics of pass/fail experiment, per lab wise as well as per
experiment wise.

Once the statistics is collected from all the test reports then it is
dumped in a json format inside a statistics.org file.

* Implementation
** Exporter Program
*** Code
#+begin_src python :tangle exporter.py :eval no 
#######################################################
# File name: exporter.py
# Author: Yogesh Agrawal
# Submission: Dec 10, 2015
# Email: yogeshiiith@gmail.com; yogesh@vlabs.ac.in
#######################################################


import xlrd
import os
import sys
import re
import time
import urllib


filesexclude = set(["README.md"])
filescombined = "(" + ")|(".join(filesexclude) + ")"

dirsexclude = set([".git", "IIT Bombay", "Amrita"])
dirscombined = "(" + ")|(".join(dirsexclude) + ")"

snoColumnwidth = 5
expnameColumnwidth = 30
testcasenameColumnwidth = 50
passfailColumnwidth = 10
defectColumnwidth = 15


def main(argv):
    if len(argv) < 2:
        print "Please provide the path of the file/directory within quotes in command line!"
    else:
        path = argv[1]
        if os.path.exists(path):
            if os.path.isfile(path):
                single_file(path)
            elif os.path.isdir(path):
                walk_over_path(path)
        else:
            print "Provided target does not exists!"
    return

def single_file(path):
    fileName = os.path.basename(path)
    root, extension = os.path.splitext(fileName)
    if (extension == '.xlsx'):
        process_lab_file(path)
    else:
        print "Program does not support the %s file format." %(extension)
    return

def walk_over_path(path):
    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if not re.match(dirscombined, d)]
        files[:] = [f for f in files if not re.match(filescombined, f)]
        for f in files:
            name, extension = os.path.splitext(f)
            if (extension == '.xlsx'):
                path = os.path.join(root, f)
                process_xlsx_file(path)
    return

def process_lab_file(path):
    try:
        book = xlrd.open_workbook(path)
    except:
        print "%s does not have read permission" %(path)
        return
    labDirectory, extension = os.path.splitext(path)
    labName = os.path.basename(labDirectory)
    make_directory(labDirectory)
    numberOfExp = book.nsheets
    gitLabUrl = os.path.join("https://github.com/Virtual-Labs/", labName)
    labTestCasesUrl = []
    labTestCasesName = []
    for expIndex in range(numberOfExp):
        experiment = book.sheet_by_index(expIndex)
        expTestCasesUrl, expTestCasesName = process_experiment(experiment, labDirectory, gitLabUrl)
        labTestCasesUrl.extend(expTestCasesUrl)
        labTestCasesName.extend(expTestCasesName)
    createTestReport(labDirectory, labTestCasesUrl, labTestCasesName, labName, gitLabUrl)
    return

def make_directory(directory):
    if not os.path.exists(directory):
            os.makedirs(directory)
    return

def process_experiment(experiment, labDirectory, gitLabUrl):
    expName = experiment.name
    expDirectory = os.path.join(labDirectory, expName)

    gitExpUrl = os.path.join(gitLabUrl, "blob/master/test-cases/integration_test-cases", expName)

    totalRows = experiment.nrows
    expTestCasesUrl = []
    expTestCasesName = []
    feature = experiment.row(1)[2].value

    if (re.match('system', expName, re.IGNORECASE)):
        prefix = experiment.row(1)[0].value.rstrip(" Lab")
    else:
        prefix = expName

    testCaseFileName = prefix + "_01_" +  feature + ".org"
    linkto =  os.path.join(gitExpUrl, testCaseFileName)
    referlink = "[[" + linkto + "][" + testCaseFileName + "]]"
    postConditions = False
    if (re.match('post conditions', experiment.row(0)[12].value, re.IGNORECASE)):
        postConditions = True
    make_directory(expDirectory)
    for row in range(1, totalRows):
        testCaseFileName = prefix + "_" + str(row).zfill(2) + "_" + experiment.row(row)[2].value + ".org"
        filepath = os.path.join(expDirectory, testCaseFileName)
        gitTestCaseUrl = os.path.join(gitExpUrl, urllib.quote(testCaseFileName))
        expTestCasesUrl.append(gitTestCaseUrl)
        expTestCasesName.append(testCaseFileName)
        data =  org_data(experiment.row(row), row, postConditions)
        if(row > 1):
            data['preConditions'] = "* Pre conditions\n  - Refer to first test case " + referlink + "\n\n"
        write_to_file(filepath, data)

    metaFileName = expName + "_metafile.org"
    metaFilePath = os.path.join(expDirectory, metaFileName)
    createMetaFile(expTestCasesUrl, expTestCasesName, metaFilePath)
    return expTestCasesUrl, expTestCasesName

def org_data(rowValue, rowNumber, postConditions):
    data = {}
    data['author'] = "* Author: " + rowValue[10].value + "\n"
    data['date'] = "* Date Created: " + time.strftime("%d %b %Y") + "\n"
    data['environment'] = "* Environment\n" + reorganize_data_version1(rowValue[12].value) + "\n"
    data['objective'] = "* Objective\n" + reorganize_data_version1(rowValue[6].value) + "\n"
    data['preConditions'] = "* Pre conditions\n" + reorganize_data_version2(rowValue[11].value) + "\n"
    if (postConditions):
        data['postConditions'] = "* Post conditions\n" + reorganize_data_version2(rowValue[12].value) + "\n"
        data['review_comments'] = "* Review/comments\n" + reorganize_data_version1(rowValue[15].value) + "\n"
    else:
        data['postConditions'] = "* Post conditions\n  - Nil" + "\n"
        data['review_comments'] = "* Review/comments\n" + reorganize_data_version1(rowValue[14].value) + "\n"
    if (rowNumber == 1):
        data['testSteps'] = "* Test Steps\n" + reorganize_teststeps(rowValue[7].value) + "\n"
    else:
        data['testSteps'] = "* Test Steps\n" + reorganize_data_version2(rowValue[7].value) + "\n"
    data['result'] = "* Expected result\n" + reorganize_data_version2(rowValue[8].value) + "\n"
    return data

def reorganize_data_version1(data):
    if (len(data) == 0):
        return ""
    splitData = data.split('\n')
    length = len(splitData)
    organizedData = ""
    for line in splitData:
        if(line == '\n' or line == ""):
            continue
        line = line.lstrip(" -")
        organizedData+= '  - ' + line + "\n"
    return organizedData

def reorganize_data_version2(data):
    if (len(data) == 0):
        return ""
    splitData = data.split('\n')
    length = len(splitData)
    organizedData = ""
    count = 1
    for line in splitData:
        if(line == '\n' or line == ""):
            continue
        line = line.lstrip(" -.1234567890")
        organizedData+= '  ' + str(count) + '. ' + line + "\n"
        count+= 1
    return organizedData
def reorganize_data_version2(data):
    if (len(data) == 0):
        return ""
    splitData = data.split('\n')
    length = len(splitData)
    organizedData = ""
    count = 1
    for line in splitData:
        if(line == '\n' or line == ""):
            continue
        line = line.lstrip(" -.1234567890")
        organizedData+= '  ' + str(count) + '. ' + line + "\n"
        count+= 1
    return organizedData

def reorganize_teststeps(data):
    if (len(data) == 0):
        return ""
    splitData = data.split('\n')
    length = len(splitData)
    organizedData = ""
    splitData[0] = splitData[0].lstrip(" -")
    organizedData+= '  - ' + splitData[0] + '\n'
    count = 1
    for line in splitData[2:length-1]:
        line = line.lstrip(" -.1234567890")
        organizedData+= '  ' + str(count) + '. ' + line + "\n"
        count+=1
    return organizedData

def write_to_file(filepath, data):
    filepointer = open(filepath, 'w')
    filepointer.write(data['author'].encode("utf-8"))
    filepointer.write(data['date'].encode("utf-8"))
    filepointer.write(data['environment'].encode("utf-8"))
    filepointer.write(data['objective'].encode("utf-8"))
    filepointer.write(data['preConditions'].encode("utf-8"))
    filepointer.write(data['postConditions'].encode("utf-8"))
    filepointer.write(data['testSteps'].encode("utf-8"))
    filepointer.write(data['result'].encode("utf-8"))
    filepointer.write(data['review_comments'].encode("utf-8"))
    filepointer.write("\n")
    filepointer.close()
    return

def createMetaFile(testCasesUrl, testCasesName, metaFilePath):
    filePointer = open(metaFilePath, 'w')
    filePointer.write("S.no\t\tTest case link\n")
    length = len(testCasesUrl)
    count = 1
    for index in range(length):
        line = str(count) + ". " + "\t" + "[[" + testCasesUrl[index] + "][" + testCasesName[index] + "]]" + "\n"
        filePointer.write(line)
        count+=1
    filePointer.close()
    return

def generateLine(sno, expname, testcasename, passfail, defectlink, linklength=0):
    snolength = len(sno); sno = sno + " "*(snoColumnwidth - snolength)
    expnamelength = len(expname); expname = expname + " "*(expnameColumnwidth - expnamelength)
    if (linklength==0):
        linklength = len(testcasename);
    testcasename = testcasename + " "*(testcasenameColumnwidth - linklength)
    passfaillength = len(passfail); passfail = passfail + " "*(passfailColumnwidth - passfaillength)
    defectlinklength = len(defectlink); defectlink = defectlink + " "*(defectColumnwidth - defectlinklength)

    line = "| " + sno + "  |  " + expname + "  |  " + testcasename + "  |  " + passfail + "  |  " + defectlink + " |\n"
    return line

def lineBreak():
    line  = "|" + "-"*132+ "|\n"
    return (line)


def createTestReport(parentDirectory, labTestCasesUrl, labTestCasesName, labName, gitLabUrl):
    commit_id = raw_input("Please enter commit id to generate test report for lab: %s\n" %(labName))
    testReportPath = parentDirectory + "/" + labName + "_" + commit_id + "_testreport.org"
    filePointer = open(testReportPath, 'w')
    filePointer.write("* Test Report\n")
    filePointer.write("** Lab Name : %s\n" %(labName))
    filePointer.write("** GitHub URL : %s\n" %(gitLabUrl))
    filePointer.write("** Commit ID : %s\n\n" %(commit_id))
    filePointer.write(lineBreak())

    sno = "*Sno"; expname = "Experiment Name"; testcasename = "Test Case";
    passfail = "Pass/Fail"; defectlink = "Defect Link*";
    line = generateLine(sno, expname, testcasename, passfail, defectlink)
    filePointer.write(line)

    filePointer.write(lineBreak())
    count = 1;
    length = len(labTestCasesUrl)
    for index in range(length):
        testCaseName = labTestCasesName[index]
        sno = str(count)+ ". ";
        expname = testCaseName.split("_")[0];
        testCaseLink = "[[" + labTestCasesUrl[index] + "][" + labTestCasesName[index] + "]]";
        passfail = " "; defectlink = " ";

        linklength = len(testCaseName)
        line = generateLine(sno, expname, testCaseLink, passfail, defectlink, linklength)
        filePointer.write(line)
        filePointer.write(lineBreak())
        count+=1;
    filePointer.close()
    return

if __name__ == "__main__":
    main(sys.argv)
#+end_src

** Test report generation Program
*** Code
#+begin_src python :tangle testreport.py :eval no
#######################################################
# File name: testreport.py
# Author: Yogesh Agrawal
# Submission: Dec 10, 2015
# Email: yogeshiiith@gmail.com; yogesh@vlabs.ac.in
#######################################################

import os
import sys
import re
import time

filesexclude = set([".*testreport.org~", ".*statsreport.org", "README.md", ".*metafile.org", ".*stats.org", ".*testreport.org", ".*.xlsx", ".*.html"])
filescombinedexclude = "(" + ")|(".join(filesexclude) + ")"

#filesinclude = set([".*org"])
#filescombinedinclude = "(" + ")|(".join(filesinclude) + ")"

dirsexclude = set([".git", "IIT Bombay", "Amrita", "NIT Karnataka"])
dirscombined = "(" + ")|(".join(dirsexclude) + ")"

snoColumnwidth = 5
expnameColumnwidth = 30
testcasenameColumnwidth = 50
passfailColumnwidth = 10
defectColumnwidth = 15
severityColumnwidth = 12
allTestCasesLink = []

def main(argv):
    if len(argv) < 2:
        print "Please provide the path of the lab directory within quotes in command line!"
    else:
        path = argv[1]
        targetDir = argv[2]
        if os.path.exists(path) and os.path.isdir(path):
            path = path.rstrip("/")
            walk_over_path(path, targetDir)
        else:
            print "Provided target does not exists!"
    return

def create_testreport_inside_project(projectName, path):
    testReportPath = os.path.join(path, "testreport.org")
    linkToTestReport = os.path.join("https://github.com/Virtual-Labs/test-reports/tree/master/", projectName)
    if not os.path.exists(testReportPath):
        filePointer = open(testReportPath, 'w')
        content = "[[%s][View Test Reports for %s Lab]]" %(linkToTestReport, projectName)
        filePointer.write(content)
        filePointer.close()
    return

def walk_over_path(path, targetDir):
    projectName = os.path.basename(path)
    create_testreport_inside_project(projectName, path)
    testCasesPath = os.path.join(path , "test-cases/integration_test-cases")
    for root, dirs, files in os.walk(testCasesPath):
        dirs[:] = [d for d in dirs if not re.match(dirscombined, d)]
        files[:] = [f for f in files if not re.match(filescombinedexclude, f)]
        #files[:] = [f for f in files if re.match(filescombinedinclude, f)]
        if files:
            files = sorted(files)
            gitLabUrl = os.path.join("https://github.com/Virtual-Labs/", projectName)
            testCasesLink = createMetaFile(root, files, gitLabUrl)
            allTestCasesLink.extend(testCasesLink)
    createTestReport(projectName, gitLabUrl, allTestCasesLink, targetDir)
    return

def createMetaFile(root, testCases, gitLabUrl):
    expname = testCases[0].split("_")[0]
    metaFileName = expname + "_metafile.org"
    metaFilePath = os.path.join(root, metaFileName)
    filePointer = open(metaFilePath, 'w')
    filePointer.write("S.no\t\tTest case link\n")
    count = 1
    gitExpUrlPartial = os.path.join(gitLabUrl, "blob/master/test-cases/integration_test-cases", expname)
    testCasesLink = []
    for testCaseFileName in testCases:
        gitExpUrl = os.path.join(gitExpUrlPartial, testCaseFileName)
        testCasesLink.append(gitExpUrl)
        line = str(count) + ". " + "\t" + "[[" + gitExpUrl + "][" + testCaseFileName + "]]" + "\n"
        filePointer.write(line)
        count+=1
    filePointer.close()
    return testCasesLink

def generateLine(sno, expname, testcasename, passfail, severity, defectlink, linklength=0):
    snolength = len(sno); sno = sno + " "*(snoColumnwidth - snolength)
    expnamelength = len(expname); expname = expname + " "*(expnameColumnwidth - expnamelength)
    if (linklength==0):
        linklength = len(testcasename);
    testcasename = testcasename + " "*(testcasenameColumnwidth - linklength)
    passfaillength = len(passfail); passfail = passfail + " "*(passfailColumnwidth - passfaillength)
    defectlinklength = len(defectlink); defectlink = defectlink + " "*(defectColumnwidth - defectlinklength)
    severitylength = len(severity); severity = severity + " "*(severityColumnwidth - severitylength)
    line = "| " + sno + "  |  " + expname + "  |  " + testcasename + "  |  " + passfail + "  |  " + severity + " | " + defectlink + " |\n"
    return line

def lineBreak():
    line  = "|" + "-"*147+ "|\n"
    return (line)

def make_directory(directory):
    if not os.path.exists(directory):
            os.makedirs(directory)
    return

def getDateTime():
    timetuple = time.localtime()
    date = "%s-%s-%s" %(timetuple[2], timetuple[1], timetuple[0])
    currenttime = "%s:%s:%s" %(timetuple[3], timetuple[4], timetuple[5])
    return date, currenttime

def createTestReport(projectName, gitLabUrl, allTestCasesLink, targetDir):
    commit_id = raw_input("Please enter commit id for lab: %s\n" %(projectName))
    date, time = getDateTime()

    projectDirectory = os.path.join(targetDir, projectName)
    testreportDirectory = os.path.join(projectDirectory, "%s_%s" %(date, commit_id))
    make_directory(projectDirectory)
    make_directory(testreportDirectory)

    testReportName = time + "_testreport.org"
    testReportPath = os.path.join(testreportDirectory, testReportName)
    filePointer = open(testReportPath, 'w')
    filePointer.write("* Test Report\n")
    filePointer.write("** Lab Name : %s\n" %(projectName))
    filePointer.write("** GitHub URL : %s\n" %(gitLabUrl))
    filePointer.write("** Commit ID : %s\n\n" %(commit_id))
    filePointer.write(lineBreak())

    sno = "*Sno"; expname = "Experiment Name"; testcasename = "Test Case";
    passfail = "Pass/Fail"; severity = "Severity"; defectlink = "Defect Link*";

    line = generateLine(sno, expname, testcasename, passfail, severity, defectlink)

    filePointer.write(line)
    filePointer.write(lineBreak())
    count = 1;
    for path in allTestCasesLink:
        basename = os.path.basename(path)

        sno = str(count)+ ". ";
        expname = basename.split("_")[0];
        testcasename = "[[" + path + "][" + basename + "]]";
        passfail = ""; defectlink = ""; severity = "";

        linklength = len(basename);

        line = generateLine(sno, expname, testcasename, passfail, severity, defectlink, linklength)
        filePointer.write(line)
        filePointer.write(lineBreak())
        count+=1;
    filePointer.close()
    return

if __name__ == "__main__":
    main(sys.argv)
#+end_src

** Statistics report genration Program
*** Code
#+begin_src python :tangle statistics.py :eval no 
#######################################################
# File name: statistics.py
# Author: Yogesh Agrawal
# Submission: Dec 10, 2015
# Email: yogeshiiith@gmail.com; yogesh@vlabs.ac.in
#######################################################

import os
import sys
import re
import time

filesinclude = set([".*testreport.org"])
filescombined = "(" + ")|(".join(filesinclude) + ")"

filesexclude = set([".*testreport.org~", ".*statsreport.org", ".*.html"])
filescombinedexcl = "(" + ")|(".join(filesexclude) + ")"

dirsexclude = set([".git", "IIT Bombay", "Amrita"])
dirscombined = "(" + ")|(".join(dirsexclude) + ")"

snoColumnwidth = 5
expnameColumnwidth = 30
passColumnwidth = 10
failColumnwidth = 11
s1Columnwidth = 5
s2Columnwidth = 5
s3Columnwidth = 5


def main(argv):
    if len(argv) < 2:
        print "Please provide the path of the file/directory within quotes in command line!"
    else:
        path = argv[1]
        if os.path.exists(path):
            if os.path.isfile(path):
                single_file(path)
            elif os.path.isdir(path):
                walk_over_path(path)
    return

def single_file(path):
    basename = os.path.basename(path)
    basedir = os.path.dirname(path)
    name, extension = os.path.splitext(basename)
    if (re.match(".*_testreport.org", basename)):
        statistics = getStatistics(path)
    else:
        print "Program does not support the %s file format!" %(extension)
    return

def walk_over_path(path):
    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if not re.match(dirscombined, d)]
        files[:] = [f for f in files if re.match(filescombined, f) and not re.match(filescombinedexcl, f)]
        for f in files:
            if (re.match(".*_testreport.org", f)):
                filePath = os.path.join(root, f)
                statistics = getStatistics(filePath)
    return

def getStatistics(path):
    statistics = {}

    filePointer = open(path, 'r')
    filePointer.readline()
    labNameLine = filePointer.readline()
    gitLabUrlLine = filePointer.readline()
    commitIdLine = filePointer.readline()
    filePointer.readline(); filePointer.readline(); filePointer.readline(); filePointer.readline()
    for line in filePointer.readlines():
        if (line == "\n"):
            continue
        line = line.strip("|\n")
        if re.match('--', line):
            continue
        splitData = line.split('|')
        splitData = [item.strip() for item in splitData]
        expname = splitData[1]
        passFail = splitData[3]
        severity = splitData[4]
        if (expname not in statistics):
            statistics[expname] = {}
            statistics[expname]['fail'] = 0
            statistics[expname]['pass'] = 0
            statistics[expname]['s1'] = 0
            statistics[expname]['s2'] = 0
            statistics[expname]['s3'] = 0
        if(re.match('pass', passFail, re.IGNORECASE)):
            statistics[expname]['pass'] += 1
        elif(re.match('fail', passFail, re.IGNORECASE)):
            statistics[expname]['fail'] += 1

        if(re.match('s1', severity, re.IGNORECASE)):
            statistics[expname]['s1'] += 1
        elif(re.match('s2', severity, re.IGNORECASE)):
            statistics[expname]['s2'] += 1
        elif(re.match('s3', severity, re.IGNORECASE)):
            statistics[expname]['s3'] += 1

    filePointer.close()
    dirname = os.path.dirname(path)
    filename = os.path.basename(path)
    time = filename.split("_")[0]
    commitId = commitIdLine.split(" ")[-1].strip("\n")
    labName = labNameLine.split(" ")[-1].strip("\n")
    exppath = dirname + "/" + time + "_stats.org"
    write_to_file_per_lab(exppath, labNameLine, gitLabUrlLine, commitIdLine, statistics)
    return statistics

def generateLine(sno, expname, passcount, s1, s2, s3, failcount):
    snolength = len(sno); sno = sno + " "*(snoColumnwidth - snolength)
    expnamelength = len(expname); expname = expname + " "*(expnameColumnwidth - expnamelength)
    passcountlength = len(passcount); passcount = passcount + " "*(passColumnwidth - passcountlength)
    failcountlength = len(failcount); failcount = failcount + " "*(failColumnwidth - failcountlength)
    s1length = len(s1); s1 = s1 + " "*(s1Columnwidth - s1length)
    s2length = len(s2); s2 = s2 + " "*(s2Columnwidth - s2length)
    s3length = len(s3); s3 = s3 + " "*(s3Columnwidth - s3length)

    line = "| " + sno + "  |  " + expname + "  |  " + passcount + "  |  " + s1 + "  |  "  + s2 + "  |  " + s3 + "  |  " + failcount + " |\n"
    return line

def lineBreak():
    totalwidth = snoColumnwidth + expnameColumnwidth + passColumnwidth + failColumnwidth + s1Columnwidth + s2Columnwidth + s3Columnwidth + 32;
    line  = "|" + "-"*totalwidth+ "|\n"
    return (line)


def write_to_file_per_lab(path, labNameLine, gitLabUrlLine, commitIdLine, data):
    filePointer = open(path, 'w')
    filePointer.write("* Statistics Report\n")
    filePointer.write(labNameLine)
    filePointer.write(gitLabUrlLine)
    filePointer.write(commitIdLine)
    filePointer.write("** Detailed Statistics : https://github.com/issues\n")
    filePointer.write("\n")

    table = lineBreak()
    table+= generateLine("*S.no", "Experiment Name", "Pass Count", "S1", "S2", "S3", "Fail Count*")
    table+= lineBreak()
    count = 1
    passcount = 0;    failcount = 0; s1count = 0; s2count = 0; s3count = 0;
    for exp in data:
        sno = str(count) + ".";  passcountstr = str(data[exp]['pass']); failcountstr = str(data[exp]['fail'])
        s1 = str(data[exp]['s1']); s2 = str(data[exp]['s2']); s3 = str(data[exp]['s3']);
        line = generateLine(sno, exp, passcountstr, s1, s2, s3, failcountstr)
        table += line + lineBreak()
        passcount+=data[exp]['pass']
        failcount+=data[exp]['fail']
        s1count+=data[exp]['s1']
        s2count+=data[exp]['s2']
        s3count+=data[exp]['s3']
        count+=1

    filePointer.write("Total number of passed test cases = %s\n\n" %(passcount))
    filePointer.write("Total number of defects with S1 severity = %s\n\n" %(s1count))
    filePointer.write("Total number of defects with S2 severity = %s\n\n" %(s2count))
    filePointer.write("Total number of defects with S3 severity = %s\n\n" %(s3count))
    filePointer.write("Total number of failed test cases = %s\n\n" %(failcount))
    filePointer.write(table)
    filePointer.close()
    return

if __name__ == "__main__":
    main(sys.argv)
#+end_src
* Releases
** Release - v1.0
   This release will satisfy all the requirements.
   Release Date :: [2015-11-30 Mon]
